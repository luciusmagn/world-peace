token Dec='dec'
      Ret='ret'
      Do='do'
      By='by'
      Case='case'
      Num='num'
      Load='load'
      If='if'
      Else='else'
      Until='-->'
      PatternArrow='<-'
      Spacer='---';

token LPar='(' RPar=')' Comma=',' Colon=':' LBrace='{' RBrace='}' Period='.'
      Semi=';' Asn='=' Plus='+' Minus='-' Star='*' Slash='/' Not='!'
      Caret='^' LAng='<' RAng='>' And='&' Percent='%' Pipe='|' LBracket='{'
      RBracket='}' DoubleDot='..'
      ;

token Name='<name>' Integer='<integer>' Url='<url>';

token Whitespace;

skip Whitespace;

start file;

file: item*;

item:
     load_stmt
   | variable
   | function
   ;

load_stmt:
     load_local
   | load_url
   ;

load_local:
     'load' Name
   ;

load_url:
     'load' Url
   ;

maybe_spacer:
     [ '---' ]
     ;

variable:
     maybe_spacer 'num' Name '=' expr ';'
     ;

function:
     'dec' Name param_list '(' body end_expr
     ;

param_list:
     '(' [param (?1 ',' param)* [',']] ')'
     ;

param:
     'num' Name
     ;

body:
    ( '---' [ statement ] )*
    ;

end_expr:
    'end' (
         '{' end_body '}'
    )
    ;

end_body:
      pattern_match
    | expr
    ;

pattern_match:
    match_arm match_arm*
    ;

match_arm:
    name '<-' pattern ':' match_body ','
    ;

pattern:
      range
    | Integer
    | '!'* Name
    ;

range:
    [ Integer | Name ] '..' [Integer | Name ]
    ;
